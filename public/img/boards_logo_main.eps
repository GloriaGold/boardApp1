%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.4 (Build 17E199) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 124 60
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 124 60
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: AFAMEM+SFProDisplay-Bold
%!FontType1-1.0: AFAMEM+SFProDisplay-Bold 1.0%%CreationDate: 5/9/18% Copyright 2018 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (1.0) readonly def/FullName (SF Pro Display Bold) readonly def/FamilyName (SF Pro Display) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -280 def/UnderlineThickness 190 defend readonly def/FontName /AFAMEM+SFProDisplay-Bold def/PaintType 0 def/FontType 1 def/FontMatrix [0.0005 0 0 0.0005 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /B putdup 34 /o putdup 35 /space putdup 36 /a putdup 37 /r putdup 38 /d putdup 39 /s putreadonly def/FontBBox {-585 -1028 2631 2178} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BEE52D4E04AF3F9FCFE957BF8B533F2D554B8921645F13AF8C5942FE3DD437F67195A135501E5547C2B33DDF6A2D7C84BC4CAF0E62507345B98490C3A25334CF69790E9C42FC2CDE604AA2C529BEE846745E2FC74335CD69344564C1B9F7D002F8A8DFBD3682D7A434DB59111E36EDA7853D4976F1640FCA52A3FD8167A5F4EF1960CE882FBF62B43EF2FE2C02DA49BD1902C7FB0AAFC51D402F23320414CEE43E07B9FFB1BA32ED505E606E9D1941F167477E4D2529AFA091AF953B2FB54BE94D4C4D824F0D1B1F1636A81ADA3CBC567E57A8672DE2B89C56B5EE6B0E0AE91862A403E2FCE01ED09EAE3FBBFEE6DD8396B16466A71ACB063C5F953923877CF24FF472C04EBDA45FB1A3D0D60D9D2DA974FA13CC9F8177FEE3353DCD7656AF347601AA3ABB6AE82EFD8389F84A7E00F64ABBABCC9BD674AF3A3C952A1A570F60BFD3A41C20FA936C0C1D7491BCD7CB0357225D688ED6C2B5A7C8425507CF9BD2F01DA50EB11BDBF0A56879FB8FDC95DD0B27921C336E5C81A5CA3091FA274582798E7EAC0E28F9AE40A5918C9038C2087DCF2A16FF68B5A4B83597F8F6D797C0F897BC48134E07ACBE18198D1264F2049A6E7A7633F177C46D749299D9DC0C0588C03380429B211CD9B807E6B2F90E829B7EC7A81DCB5E42A739172E9B29E3B023EB14462AF03802DCA0D9B3CE460F5585AE0CDA3120085E5DCED5CCEAA6E063321FB57A182AD287C70C528F5D6DE4D9CD652653500B2F22D2AB6990CADDE2D8C4D29E1A7947EDE3DF506BFECBB5574E1E8DCFF0D04EF4421B991F43F12A1B03CB5174F6C571F6A27F29C8CC6EC2271660406F715D580132BED3840BA92DE169181298F0B658B1D87FFFD64326AEFEAEB9F50401F8EB0ED80C4B7032BC89967B7B43B44D88690683A751DB671EEB3937A46AA8075EF76759054C05647F2F3DBABDCB74FA3365F7CB35E5150B173AF0FA301FDE1B02FAFE7A6626A60041415E183A5F7CBFF68F7531C17698CA18D3083FBC7FB57028A0D4EA9824C8AEE082DD29A861ADE0677D8BC8F6E540161A29CDB0738FFF75E6130F31E9024B8919939BC43B5C3C3FA2EDB2A2EB263566DE233A8BF2D7D12E665953234E3B8CB8B6646B411D9EF70C5ABFB8D4A571A0F19863C91D9DBFA477E669503C963E1576A08493091DCB737C01AB94B016D731E16E4B24FB2E87FF7A8299F3F26F5328D385E971061F3BCFEED654CA7073C423A4216D44454B3AA8E3B6441C625772F6F3B1CDC2B9471315E1B9468169424A38F56FC2EA65E1B8EAA354A8BA383C3A178796E8542F38EBB6D5F7CE0E0A49CF9DE1BBF90AB01C51B83F29097564A040DE33D1CFE85B038F54FBE8FBF2E2537202FDC2FCE1B17702FD4870C53005805868F643C8FC4219E08CE5AD1E8C5E2E0988E5CFE1AC2DFD20641FE7E455BC9FB8B35CA0481BF648F195736358657CEECA3FAEB5B3303B5165D4DD9AA456B1485E1FE9812F68B4159BB370630583D153F228F59B99BBF0218571E70CE45D65FF33664EFC8754AB19A72BC49354373FC00599F5A56088E4A53E609504F8075C02D425E1D399E4822EA3CA9B3DAB1F756E45EBF657CA934236F3C86937CEAF732172E2024DDBBA5881386293713F503C4172B42BA5F00D46272B37BA5CA0ACD4A3693D5B1464E3AC6FBD961C6288B54232DF77459580F83D6B409C4FFDD55B06F4BB584D1666908EF46F032666FABDF203C2AB4DCEB77D192FE1F7A5A1A2ECECD543E2B4FE5CA729208ACC119EE41725E19DCA6E9877116B7DD9B73832155D396E3D1FAC6ACF9630CAD5D5AF55BD20223C186B6135FDC8EDEC4BBB27417EC3EA1D0211E7F1619F580D2879AA8C12210F7D81EEC19ED670768B0C5AEEFB2DA5A01A5C98C333EC5D449F6DA822DCB864A0EB3C2B616901E49A8AED4441BE2C9598A9365A6BAB89BE95B227F8BA5C38A022CBF52E14DBAD0041A1FF3EC888E7FC8C39F8308377414212FE56BF3B35F1D5DB81CB0C35D0FD2B50602077C0D4B1DDBFD88A13CD1F0E9F430DC8F2743CC9EC7C5703D64D903599E3E0F2B41D7EE09E5CF0C48126E6B7B4F4F8BD5956ADC81B236FAAB8A42D97DC66109106BB941B40A133B67AB0941160E5A1A876A1E8738D92F4265F91353B0B13AA12F56408C4E2ADCC0FD1E03A30E8AAC3C590FCE48DB5CF18DB3AE60A645730D661052BAFAC7EB22FCC1D61C2BC8888D4174D856C63E1BACE247C1FD3DA4C384287290323C2B6FFDD17E72E6E4A23E213F2AF88DAA807FF57B5F9185DAF083942203119ED7AC6FC5361CB104F4E278EC58A5F4C9330E803DEB1AB962E7367C228594EE2F9544AC7E7C534684CB1C4F6BE9CD54BF0B965742369E8E49BAC76074A6E858F3C9F6918E1C185FF3227E27237C2BC7106762C89E0995192AC5883AF4600772ACF2C09BDAC90C5E5DEAB5F8A62E826395965AF8E124CA016856351233E416E67DD6EEC31B66763826BC097E9CE0D0A20B3D4BEFB2D18AE946B10808192ACECFEF49D15D1CC82CAB1D1D1449FF2A6C0FDD197F4D03CE2023438C08A6ECD188F32A8EBBB452A55B6BABF8A4B10B4518C6F562783DA111F07E7FA4D4A57001830FCC7311C15C64616B0714B10DD63B4CDEEBC53D29F8D8F326EAEAE74E08CB0228C8C3027877D942E8B755D127C5CDD7968425F0445A6D8555F6C10C04763CEC2D4BF4777C805C9D45F0C68F624837610347F2D5DE2074551B0E6A8EDC43BEB8AB5F552BB16FEE1196A48298A31AACDCD5A05E8A8F9D1961D61165EDD45CE6AEE308C1AC44F5B396E50C11CFBBED783131A818F165B69B2FC248A93E1479066C40AD8FFD10F7520C03D336F81CEE73DFB6A0658B41A51B343F5019BB02F5F5DF650718483F77874D217F61CA16D3003E3858861812589D309B7CC5CEEA002E5FD9D48341F03CF98FE6F38A2E45A6DEC009F367E525352EB82D75097B58C3483D07ED301A98E35C50FEF12BA3789B2778BA304B566BDFC4790FEA76C8416515E78A472E5F28605E8DFCB638396F0F6E30113194C48751F73EB5A45262A3CE9FBCCEE08F6D6D39C6CB637B2BEC2C012443FAC968BD63F6F1C823791D30E870631D48CD3886D4AD4F467B948AA8B9BEADBEFE86D42FF909A2AC3C27A464FFB0445477BDC426D7BE0A93DCFCEF3B7D4074AE1C694F7291224E4C62909F6A4150B254581B28BC1FCF767E998E322CDD3738C1C2B9DB1C96F52EE55E81C85EF937C6D9BB8ED4DC19C5C0A542EBA58AC696ED05199DC21A0D40D859F181CB011C06AB982863250F689AB4BC17E1F263E7B651ECE404F0B8C32014C7187A55328E0BB8F0BD397BD7C067F299F2AA0C02C183A210D8B1C416F455CCA31D03A0CBC7C14E6C932F97FE3514419351E8C580C0320B80B9031674D9D8C14B4F66844D07ABFD302D0B7AFE19BB5726D4FB95EDBCC015992D3BE30474BC5CBC376399A8E094F816014595755883DED608098B523E4FDD87057C04566ED46F7382631C26F4C16FFBC257C795F435E9F84284D6AAAE24376CC3F377208C0D14B552CC918E2B029519DAB2E6475B7F556602602195EFE49DE0602739DA0CDCFBBA299B86EBA2BF88981AD796087439233B8190958B0521B2B7A790FFA493F5BCA7C4A600DCB9E83415648F3E6367E0B5737C0E0943926E7EABF896C3C7AE298F6FFBE7A96818F41EA4C25255CF562DF55A840EB5D1F3C95B64FF019D9B27DFD94864FF58608C82144F17B8E8568488CC3AF660FEB3A6F75C43E75081A3CA6240FDF16E5AA5896DE581770F743AD7DE5CAE1BAAD4A9D91CAF940A6CE18E25F0210F6BA727045012E8458B6C63E06AE8C82FDA24332544D6A75CC673D840165E2BB7F681E233FB1B9BAE5B53FA91E52F62CA06E0BFCFE641BF1354572D58F20A09BFF746FB18B21A3F0E98A97A61B89C25DD42E4AEC46118C7CFA5131D4644D51918832D6A005DB60713132CCA0FE12E42052B65901CA3AE89EA95C5BB8B382F25F63586624F35B03B93E1BFD6EFA79365D1833587A48E372A0FE14C161A6244B3097A989F2FE6441D05721528FEC55F22EC3D20E0B8AE44282BD004D7D1EE30DE5CBFE031DE28475374B65CBEED3787FBC2B9720547BE832BAD0D6D12F8C7DCA6AD99B1E4696720BD8C5A92DCD5794B88D211D094F7523D6FEDDEFF92E0709E45C489BFCD5873FDF780065EC964B0A7C719176C3D16D6729FA2D00F56D9577B6A44E9914C30437E3962FB4B64865280C61879EA209BD8C021D76EB50BF71692A02D0DA49451F52C1D2E1FB3C10E6C4CB835E51F5B9B07900D57F4EBDCE194F8E1966BC970B940C9B1F6B91440EB611E7CA3CA9D29DFEBF22E953DFBAF0D92605934EE5BAEACEFFB9C67A365116186553F5D319CEC8CA9AAC047CE1E62BD7B1391AAFC1CABC6317E2A42078E48FEFCDF58519725892D9A495311EF3F74DFF59827445D164BFBE39595E348B779E2223DB4D70F7AC51DEA9324459965C0580832E0B0DF05BD37233A56D3752C4CEBE9371CA015E4172C59F46657D015B753662DBB09CFC15604C3181EB5F2B00BBE4E059C5715135763BB728FD77E6E813846F018286E5196B9A2705C29BD93DAD884D79C3FEA39E3A3D90075158C4A16428B7F8118D8C6E14544CE0E6DA3D619C9DDEDF75F1ED176CF05309C4984B0FCC8D0BB24853D645AD5EAC28A1B1B595D7BA557CB2E2B8ADF0DCD5926FBACA72EE6BEE553C51B008548B439AFFDFF9392A1F72191AB03021EEE9A603FF6A998604B610D646E8D8996C88B67B6A665F3E8BC64CC0033558B307B390AD36F36EFBD773200ACBF8243B1F785B2F0DD9F149ADC1877AF76A11591421EE7BB2341E2DC69D26DC24F76F3BE1E6BB4D6B6406884836B549CF1BB1C3AED7AE3FB14A93477F96AD9299740E6215118469899DA9E5498E08E0D37C2C8941D4BACDDE117888EBC3F45DCDC34CD7FDB777A3949F46158DC021CBE5172A076339D78BC6043EF98809CBA1007EE9D2960FC62316E25A5D103AF0E82602401AD861C01E3895E5956CE3A7255E3468FEB2AD1937E65EBFD2FE6D037E86B486B317613020B8301DEB91E910778FAD112C6D6F68BD3CD48074E5FC92D2F2A848EC30C402193FF20843B672A4B6173B6F90BC178EF156D163A2DA39A60C6C68A965A28258C51DC868AF4EA21AEAB74ADE7E942DEBBBB9EF48F89D0F2EF9B4FE9175C2BC44D2CC41ECAEE200502B4D106EAB5F88B13B1B74B728A98C280FBE3E7EBDD38AB6DF4A0182E2792194C48E74FB1E0966856877792FC21B8896B13223BF80E6357B29C676090C3FA2FFA1A70F267D0A9695AA66853280DAEC642B3B55F2388BBD372C2EB09345A9BCFC4DA97B2BD1EC55D362B2C24BCE85DE1B7EAFF04EE7B505343BA8DBBB603438B4B896C4767DD63AF877B61E7349CFA2D1501E72698F94B5D846B111CF26DADB99A4D331DEBCB256D045597B30E96C520C169DA5C3796ADD189A285232EF5779EBA539C28EAF5859492608270E1428FB6D243E64063CC4CC49AD6036B245DD966A9D0EE168BA7F49091551A675D7AB1B0B441C880C980B22AD792331505E8BA9EA6662DCEA17EA28E6D9930F93422C7680B4285B36A48FE2B6576B9FEFF20EF8B93685D10B71713D956A0DA5A00ACBDFE3F6EEE37E5FB98F995051E93AAE95A34CB42370B4803281BDDA22F9E227F6308FBC1B74CD143C4068B31ABEE44837C5E9DAA56041CCE26345596530EA3EDDBA1B95E4514B818EE3CAA72D84128632E66BB27B7F04FB634CC8200D64AD652FE7C73E8247A0B2520596D5DB2614A3D28684339D9FA5DF28D87C2DBAAFCB66057A6DD2D6F20EF23D618CFE027C56D0DF8B854B99DE8A6635C80F4478A6079D779572CE3BB8483E1229D9DCD1D144AC9F757E469ADF3D8110D59F7B34D50E5C0FC15D19EF7B91B77E7E958CA47D86FC2156C79A711AF93295F9E688CC2A6C651A76E7B6ED8BC1435C0A3A82774F61D10E0C38FFE43FEB5A81D87E853FE394DB168B2A220C7DAEBBCC05349792CF320929851EC65DA2D9822FA93619B31758FAFEB5F68DB67A918691B44965206974962E320362E58E41AFFEA6DE79F94975399B2D79DDAC0E4F63852DBC9400474D06C99E8486001F3C10472777B9EBF6811E28F87FACD36B7445E7B440C69EE5E43AC94E1524DEB47F49564863A899CB3B0088087618BAAA957B32A9DF927DD127ECB9ADC92059A67952619609C27143DAF4BF63246DF87BB47A806BDAA85FDAB7CC5E6A456B2B07317E3F2C8C6C8B5181AD2B081A74B343671401806445B222C4B783F1DA93240525C2F656FD5D259679B510CF979318D692815AAD085D440FE0EEF0DE72EFD6134A14C2B8C3B13CB380541D590A08B70D152480F93348AAB7594B4F0949C3B15C0103D5A16EDEB580AA992B3F6CD10AA4945AC451EF3D5B3A14B35D68665468F2E69362F2691C8E6CA5A80155F4AB727B4386AE9B14C4304CC3F5FD8D56E723631C436B761355E6ABF29BCACCAD670DD21C2760B600A8C3D4ADB76968696068D7ABF6FE24573A1CDEFA06D2E64016B4F16C4E426E339D101FF68C9220341D5A87877239E36CBD6825935E69C17CB630B3133C13B980AD6741781C0FB10ED0CBFD511842622208E0E7D5903C624C068A5476099CDA4F1B7636678C7DBF917E425D4F415D62856EF7806812982381771F965C7D3EB107DEA580C25DE69445E4F0AEDF7012A9ED39625A4C3F56977455A70A425E549BB6F70B96BAF7AA908BDD4C74C59DFEE08EFDF4C5A006063916548505C75E02D484A539DC5F1F43B4432B259BC4CF0CB6E231CD12025720E1B6F2CE1821489F0D9674EAB1B4DCCDB8E12B3BD15B3E1694826D0B8232C0CAB3485BD582DA8E6B528A19A736C7C27E7E050FEA58BFD4A3F6401C200FCF774966DE57D13623EEDDD18620295DDECE5A51302D070167DE785707D4C06DBF764AD413FA2C1A007B407DBDB69E6386BF58AF09ABF6DEC9E04C786961EA47561F3D445A255018C6B6F8B6C9B6D2844EB595AEB9E078900D4CC1F2683372995AFDCA182A21EECBFD562BC3DB362777141B93EA422A6D7276A9A94E86104FC69F2ED3366C2C2A3162F7950D57C48A1A7080D5C268AD6F7459F05384CFF73C04B7AC1E70D4FAF6A740A9C13D74BEE5872B00A95A37CD1970DB242DD65CB2FE21CD1DA9E6178F4B46DB35A3232D8E1A4A61F21B092C1FA530656233772AFF0EE6F28899693A55B1E84F0BA3D9D0E02D96190E3E2AA4C681B49E213A28EFEE0BDA156B6A45B6638C80828322AB71E6625C0CDF7F1DBEF670C1A7868793A001945A97D76CAC4B418C2848F88C69B4C25552632BBE615C2521A458C1DA617D60D02B91CA7B2D019EEB55866ECF38447F62965ACBFE3564F75D94E6042721372723B669769BDF43B864471EEF8D3AF96FFAAC81139B493A4BA9FF49396AACF5C98A54C0E5FEBC5FADCD9AF4C95D1186DC252B8BCE57B093067392EAA581729E724F4D4BA5D2C494A6007B54FF62ACCA113F706A134E91B2559D1C089DF246ADE789B7FCFC170392B1F218EECA608690F0AC48CF73908D3508E4776BCDE4F8320E0EAC0B1904D928068D3940BF3709DE17AA6C4C1BD4D9FA00AE2E72E20DCF124F40DE32DA0C5AA2518995F5A53D03B35DD9CA450408AB9E3E4D1535D657643790B4FB5B92E0C4A478C4ACA02A67BA4B24C49DDD2485CC9051BE10ACE434D1CEAD5B87C417EE5912E71C3868B2307BF2FEF8CE03CF641135162DD5405EBDF342B90E6555476BB01B765D52F67427FDA2189FB1C2C728531B588271DD1E83183E698E3E86EC33B748F5E59F739B3ADC813AAE41E67C57D6148D8AF809984DCBB8F4156C301CC715022CB39EA5F590D4D976672C2A02D89943517F04DD98710E5662778717A0A7F0BD4AE670E0716626AF265E88A0685EC415AB62BCE06D237FB4D23E1C34D45D532352C930B225F900F5028777DDDC3D3BC7E400DD691B783529D3C858DDA81943554670362F464B6DC50BE305E90AB1DBF5A7C2BA7542C40771F14F573EC839465B4356B3FD32EB204B51CB839DF0E5EAB1B03EC8773D936C2E5682A337FCD128CE79AA7B72000C7B2DAFF6236CD7734D463546CFDF8575AADEF307DF903CED6753FB1673D683F9355CFC11D724D2251457F77EC5C7226BD2E749749945B25D21331501B407A5F614BABC85176F2F0D5C3ECA008B77427BB87E16B501F594866A4456E455B01C64FB89EF25301EF1A41B37A1E2AD2DD6E5B66C36D25514CF924867BB1042A25AFEA324563B70B40C99D94B582FEBC9B6D9E5315B14589897FFE5E35373DB231FA54B1CFFC671E07776BBA00833F4E1EFB4AF9928D9FEEC7692EBEDD53AC8A612F73DF1B9B786FDEE103211B0AA69FFD21B0C33F74FB1FE0DEA1D8F4435B1398646EB55D633D44DC8955D98682CC9ED169B358AC924B808054EE86FF99C68BB3F41244C4AF49BD0B312F5A206C18BCA8EAAEC9974F36585C9B74D0A632CA8B5365D97DC8AE370FFC9C91BAC3646B97F931703E9372E93FE410B5B358B7F29ECE44B4E71A2FE3403C18B683C8825136A2084ABF266699AFD88E8444D9AF8ECAB86688436AB7C454EE05400BABC3FBE5277AE9CBEC1611AAD32FFE4DC26D53EBD22BDD06ADF7CA90828E6791D2D603A9F2FE661B57FBB37D707C595F9E47A09135FEF0C29250BC5EDDA6733365B8C1B60E9DE5289C56B191E4D013F701D1AF7F87522377B29BB8079C7E550ED3A9228E026682EE41F59E0A66771417A454A3DDADA6793823E53E0E97351FECC99EE96A5E1C6827BF026F82ABBE47D1175CA00BA82F20118602559852E09ECE2A3C9401325B4C3C9AC032F24257B8E3E7B676414C721955D2336A9BEC69292CE6784405B6517D132183B9A86A50DE2A055F374DBA35B2C66D3B57F1EE2E1B93A50C4BEB0563E02AA6A49AD39CBDB5398E171C9DB192B567F00378B30A2E63B0FDC9B57E9A9480DAD9A8B45B19DB3958EF77E0728DE99B1D900F45CFCE3317CCBA2172F4F38CE77B47E0497606EDE5C5A6EA04FC6CAA8972ABBBBEB6A8F564C57B98A737B8F302F4B2B7DC29819555F7F35460BA1FB4463A797F7338F86D0FF456FE71927520B6CC2F3193E16DD7CE53F8F6E77F931C37CA508EC4F7E1B287C081EA970AD0D3983F4787AB29BE60A66D5E61F9562D021B182BA212FD19BEADA5009ECF81CCDA2C7968D911E7E47D99053C62DC0BBDE7357EE079199C0AE6E4E3A1ED6B336F5F4623AA4E0002376A8C1A31F9BEF830F32FA71173B1FCE54B2EC4E0F6D46B7295F5B0605BB0A73A4A7BE79D6B2449675247C7FA83B5889F945F3E2F32EE5F137A2215202DB2D925287EEC3361EEA3AF988E1F968CDFB03BD127AB361953B6D02EC19F1B25C309079C196655943C3B48685870ED89E7D9E7B0C050AB401925C5E471E085E4031B2A78C578E0EFF58D52BB9E77F0677DC9C09DD23D095489D7BEE21ED6E4B46DE7EB389C3C91A9E69E6B18A95A1D1E8B7DAF4717103C3C8E41557D8E4A5CCECB8223CF09E1178C83BDD742F6DD226B83750E8DB79CC1530990E66F87EF07CA059826EBDA5BF56B5084360BDAF3D116A8DFDCF792ABE08492159CA04F6F84328040EF16BE66AF716E7150077BC57F9B59F65B6B0DD1F7DF8593A5110D1A6E7711A3D1F55AD3B0D6FED0011A1BEAB28A506A9CB74BBBA8AA3A7A7CD434BD8EF868D7D6740DAAA4EC3B02D256C41C881073AC3DDFBAB7B3016BC0737207EB8BFC8831627A274708A75BD0D68FC5D0859C81E881C7C54411BEA1185B7E8DD9DB6A19A06D8857A5DBCFEC1BABEE3A5A6C62F71B2902930BCB9A06C1E0E7711CD7E5BC11D6A7ECCE2204A0E0191A4115AD87ED41767823E2217E6D0EDC3300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%RBIEndFontSubset
/AFAMEM+SFProDisplay-Bold cguidfix
/F1.1/AFAMEM+SFProDisplay-Bold renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
0.2446588 0.2446588 0.2446588 sc
0.60000002 i
q
0 0 124 60 rc
1 0 0 -1 13 49 cm
/F1.1[ 32 0 0 -32 0 0]sf
0 30 m
(!"##$%&)[ 19.898750 17.758125 5.758125 5.758125 16.945625 10.523750 0.000000 ] xS
95.135002 30 m
(')s
5 w
1 J
1 j
0.2446588 0.2446588 0.2446588 sc
1 0 0 -1 3 57 cm
18 0 m
36 0 l
45.941124 0 54 8.0588741 54 18 c
54 36 l
54 45.941124 45.941124 54 36 54 c
18 54 l
8.0588741 54 0 45.941124 0 36 c
0 18 l
0 8.0588741 8.0588741 0 18 0 c
h
S
ep
end
